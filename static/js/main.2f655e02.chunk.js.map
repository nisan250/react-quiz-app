{"version":3,"sources":["Quiz.js","AddQuestionForm.js","serviceWorker.js","index.js"],"names":["Quiz","QuestionForm","props","state","name","imageUrl","books","bookTemp","onFieldChange","bind","handleSubmit","handleAddBook","event","preventDefault","this","onAddQuestion","setState","target","value","concat","onSubmit","className","htmlFor","type","onChange","map","book","key","onClick","React","Component","AddQuestionForm","match","Boolean","window","location","hostname","authors","imageSource","getTurnData","allBooks","reduce","p","c","i","fourRandomBooks","shuffle","slice","answer","sample","author","find","some","title","resetState","turnData","highlight","withRouter","history","push","render","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f655e02.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n// import logo from './logo.svg';\nimport './Quiz.css';\nimport './bootstrap.min.css';\n\nfunction Hero() {\n  return (<div className=\"row\">\n    <div className=\"jumbotron col-10 offset-1\">\n      <h1>Quiz</h1>\n      <p>Select the book written by the author shown</p>\n    </div>\n  </div>);\n}\n\nfunction Book({title, onClick}) {\n  return (<div className=\"answer\" onClick={() => {onClick(title);}}>\n    <h4>{title}</h4>\n  </div>\n  );\n}\n\nfunction Turn({author, books, highlight, onAnswerSelected}) {\n  function HighlightToBgColor (highlight) {\n    const mapping = {\n      'none': '',\n      'correct': 'green',\n      'wrong': 'red'\n    }\n    return mapping[highlight];\n  }\n\n  return (<div className=\"row turn\" style={{backgroundColor: HighlightToBgColor(highlight)}}>\n    <div className=\"col-4 offset-1\">\n      <img src={author.imageUrl} className=\"questionimage\" alt=\"Author\"/>\n    </div>\n    <div className=\"col-6\">\n      {books.map((title) => <Book title={title} key={title} onClick={onAnswerSelected} />)}\n    </div>\n  </div>);\n}\n\nTurn.propTypes = {\n  author: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    imageUrl: PropTypes.string.isRequired,\n    imageSource: PropTypes.string.isRequired,\n    books: PropTypes.arrayOf(PropTypes.string).isRequired\n  }),\n  books: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n  highlight: PropTypes.string.isRequired\n};\n\nfunction Continue({ show, onContinue }) {\n  return (\n    <div className=\"row continue\">\n    { show\n      ? <div className=\"col-11\">\n          <button className=\"btn btn-primary btn-lg float-right\" onClick={onContinue}>Continue</button>\n        </div>\n      : null }\n    </div>\n  );\n}\n\nfunction Footer() {\n  return (<div id=\"footer\" className=\"row\">\n    <div className=\"col-12\">\n        <p className=\"text-muted credit\">\n          by Nisan Sabag\n        </p>\n    </div>\n  </div>);\n}\n\nfunction Quiz({turnData, highlight, onAnswerSelected, onContinue}) {\n  return (\n    <div className=\"container-fluid\">\n      <Hero />\n      <Turn highlight={highlight} {...turnData} onAnswerSelected={onAnswerSelected} />\n      <Continue show={highlight === 'correct'} onContinue={onContinue}/>\n      <p><Link to=\"/add\">Add a question</Link></p>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Quiz;\n","import React from 'react';\nimport \"./AddQuestionForm.css\";\n\nclass QuestionForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            imageUrl: '',\n            books: [],\n            bookTemp: ''\n        };\n        this.onFieldChange = this.onFieldChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleAddBook = this.handleAddBook.bind(this);\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.onAddQuestion(this.state);\n    }\n    onFieldChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    handleAddBook(event) {\n        this.setState({\n            books: this.state.books.concat([this.state.bookTemp]),\n            bookTemp: ''\n        });\n    }\n    render() {\n        return <form onSubmit={this.handleSubmit}>\n            <div className=\"AddQuestionForm__input\">\n                <label htmlFor=\"name\">Name</label>\n                <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.onFieldChange} />\n            </div>\n            <div className=\"AddQuestionForm__input\">\n                <label htmlFor=\"imageUrl\">Image URL</label>\n                <input type=\"text\" name=\"imageUrl\" value={this.state.imageUrl} onChange={this.onFieldChange} />\n            </div>\n            <div className=\"AddQuestionForm__input\">\n                <label htmlFor=\"bookTemp\">Books</label>\n                {this.state.books.map((book) => <p key={book}>{book}</p>)}\n                <input type=\"text\" name=\"bookTemp\" value={this.state.bookTemp} onChange={this.onFieldChange} />\n                <input type=\"button\" value=\"+\" onClick={this.handleAddBook} />\n            </div>\n            <input type=\"submit\" value=\"Add\"/>\n        </form>;\n    }\n}\n\nfunction AddQuestionForm({match, onAddQuestion}) {\n    return <div className=\"AddQuestionForm\">\n        <h1>Add a Question</h1>\n        <QuestionForm onAddQuestion={onAddQuestion}/>\n    </div>;\n}\n\nexport default AddQuestionForm;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  console.log(process.env);\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom';\nimport './index.css';\nimport Quiz from './Quiz';\nimport AddQuestionForm from './AddQuestionForm';\nimport * as serviceWorker from './serviceWorker';\nimport {shuffle, sample} from 'underscore';\n\nconst authors = [\n  {\n    name: 'Kyle Simpson',\n    imageUrl: 'images/authors/kyle-simpson.jpeg',\n    imageSource: '',\n    books: ['You Don’t Know JS']\n  },\n  {\n    name: 'Douglas Crockford',\n    imageUrl: 'images/authors/douglas-crockford.jpg',\n    imageSource: '',\n    books: ['How Javascript Works', 'Javascript: The Good Parts']\n  },\n  {\n    name: 'Marijn Haverbeke',\n    imageUrl: 'images/authors/marijn-haverbeke.jpg',\n    imageSource: '',\n    books: ['Eloquent JavaScript']\n  },\n  {\n    name: ' Eric Elliott',\n    imageUrl: 'images/authors/eric-elliott.jpeg',\n    imageSource: '',\n    books: ['Programming JavaScript Applications: Robust Web Architecture with Node, HTML5, and Moderns JS Libraries']\n  },\n  {\n    name: 'David Flanagan',\n    imageUrl: 'images/authors/david-flanagan.jpg',\n    imageSource: '',\n    books: ['JavaScript: The Definitive Guide']\n  },\n  {\n    name: 'Reginald Braithwaite',\n    imageUrl: 'images/authors/reginald-braithwaite.jpg',\n    imageSource: '',\n    books: ['JavaScript Allongé: The Six Edition']\n  }\n];\n\nfunction getTurnData(authors) {\n  const allBooks = authors.reduce(function (p, c, i) {\n      return p.concat(c.books);\n  }, []);\n  const fourRandomBooks = shuffle(allBooks).slice(0,4);\n  const answer = sample(fourRandomBooks);\n\n  return {\n      books: fourRandomBooks,\n      author: authors.find((author) =>\n          author.books.some((title) =>\n              title === answer))\n  }\n}\n\n// const state = {\n//   turnData: getTurnData(authors),\n//   highlight: '',\n// };\n\nfunction resetState() {\n  return {\n    turnData: getTurnData(authors),\n    highlight: ''\n  };\n}\n\nlet state = resetState();\n\nfunction onAnswerSelected(answer) {\n  const isCorrect = state.turnData.author.books.some((book) => book === answer);\n  state.highlight = isCorrect ? 'correct' : 'wrong';\n  render();\n}\n\nfunction App() {\n  return <Quiz {...state}\n    onAnswerSelected={onAnswerSelected}\n    onContinue={() => {\n      state = resetState();\n      render();\n    }}/>;\n}\n\nconst AuthorWrapper = withRouter(({ history }) =>\n  <AddQuestionForm onAddQuestion={(author) => {\n    authors.push(author);\n    history.push('/');\n  }} />\n);\n\nfunction render() {\n  ReactDOM.render(\n    <div>dddddd</div>\n  // <BrowserRouter basename=\"/react-quiz-app\" forceRefresh={false}>\n  //   <React.Fragment>\n  //     <Route exact path=\"/\" component={App} />\n  //     <Route path=\"/add\" component={AuthorWrapper} />\n  //   </React.Fragment>\n  // </BrowserRouter>, document.getElementById('root')\n  );\n}\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}